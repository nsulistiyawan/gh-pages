{
    "version": "https://jsonfeed.org/version/1",
    "title": "/dev/null",
    "description": "",
    "home_page_url": "https://nsulistiyawan.github.io",
    "feed_url": "https://nsulistiyawan.github.io/feed.json",
    "user_comment": "",
    "author": {
        "name": "nsulistiyawan"
    },
    "items": [
        {
            "id": "https://nsulistiyawan.github.io/covid-19-dan-ujian.html",
            "url": "https://nsulistiyawan.github.io/covid-19-dan-ujian.html",
            "title": "COVID-19 dan Ujian",
            "summary": "<p class=\"dropcap\">Akhir Desember 2019, beberapa orang di Kota Wuhan, Provinsi Hubei, Tiongkok mengalami penyakit pneumonia tanpa sebab yang jelas, aneh nya prosedur dan obat yang diberikan oleh rumah sakit di kota tersebut tidak mampu menyembuhkan gejalanya. 41 orang tertular penyakit yang belum teridentifikasi tersebut.</p>\n",
            "content_html": "<p class=\"dropcap\">Akhir Desember 2019, beberapa orang di Kota Wuhan, Provinsi Hubei, Tiongkok mengalami penyakit pneumonia tanpa sebab yang jelas, aneh nya prosedur dan obat yang diberikan oleh rumah sakit di kota tersebut tidak mampu menyembuhkan gejalanya. 41 orang tertular penyakit yang belum teridentifikasi tersebut.</p>\n\n<p>Karena sifatnya yang mudah menular melalui droplet (cipratan air kecil dari bersin atau batuk),  Pasar Wuhan yang diduga sebagai sumber penyebaran penyakit ditutup tanggal 1 Januari 2020 dan orang-orang yang mengalami gejala serupa dikarantina. Dunia dikejutkan dengan munculnya penyakit tersebut, WHO pun sempat merilis laman berita tentang <a href=\"https://web.archive.org/web/20200107032945/https://www.who.int/csr/don/05-january-2020-pneumonia-of-unkown-cause-china/en/\" target=\"_blank\" rel=\"noopener noreferrer\">wabah penyakit baru</a>. Sejak saat itu, media massa mulai ramai memberitakan penyakit baru, yang sekarang disebut sebagai <a href=\"https://www.who.int/emergencies/diseases/novel-coronavirus-2019\">COVID 19</a> . <br><br>Media sosial juga tidak kalah hebohnya. Opini dan teori teori konspirasi bermunculan, beberapa tweet di sosial media Twitter misalnya, menyebutkan bahwa wabah virus <strong>COVID-19</strong>, bersumber dari senjata biologis yang sengaja dikembangkan di <strong>Wuhan</strong>, dan kemudian bocor sehingga menjadi bencana di negerinya sendiri. Sayangnya, sampai tulisan ini dibuat, saya belum mendengar bukti yang bisa dipertanggung jawabkan atas teori tersebut.<br><br>Di Indonesia sendiri, berbagai opini bermunculan, tidak sedikit opini yang menjustifikasikan bahwa virus <strong>COVID-19</strong> adalah <em>azab</em> atas perlakuan negara tersebut terhadap muslim Uyghur, sebuah pendapat yang mungkin tidak akan diutarakan ketika virus <strong>MERS-CoV</strong> menyerang Arab Saudi dan beberapa negara tetangganya di tahun 2012.  <br><br>Setiap orang tentu berhak mengutarakan pendapat masing masing, sesuai versinya masing masing. Namun kita hendaknya selalu melakukan validasi atas setiap pendapat dan teori yang muncul (termasuk tulisan saya ini juga tentunya), tidak lantas menelan bulat bulat, apalagi menyebarkan berita yang belum jelas di media sosial dengan membabi buta. <br><br>Terlebih untuk masalah memperebutkan keberpihakan Tuhan, saya rasa bukan hal yang mudah untuk dibuktikan kebenarannya. Yang jelas, ketika manusia lain mengalami musibah di belahan dunia lain, sangat tidak bijak sekali kalau kita menjustifikasi hal itu sebagai suatu bukti keberpihakan Tuhan pada kita.<br><br>Sering kita berasumsi, kalau <em>ujian</em> dari Tuhan itu selalu dalam bentuk kesulitan, wabah ataupun musibah. Saya rasa tidak juga, tidak jarang <em>ujian</em> juga <em>menyamar</em> dalam bentuk kesenangan, kenyamanan, dan kemudahan.</p>\n<blockquote>Sering kita tidak sadar, kalau yang diuji itu bukan cuma yang terkena musibah.</blockquote>\n<p>Ada <em>ujian</em> bagi media massa untuk tidak membuat berita yang provokatif atau memicu kepanikan berlebihan, ada <em>ujian</em> bagi <em>netizen</em> untuk tidak menyebarkan berita yang belum jelas tingkat kebenarannya, ada pula <em>ujian</em> bagi para <em>pedagang</em> untuk tidak mengambil keuntungan berlipat dari kepanikan dan kesusahan orang lain.<br><br>Ya, saya rasa dalam setiap musibah yang terjadi kepada orang lain, kita juga sedang diuji Tuhan, tentang bagaimana sikap kita merespon kejadian tersebut.<br><br><br>Referensi :</p>\n<p><a href=\"https://web.archive.org/web/20200107032945/https://www.who.int/csr/don/05-january-2020-pneumonia-of-unkown-cause-china/en/\">https://web.archive.org/web/20200107032945/https://www.who.int/csr/don/05-january-2020-pneumonia-of-unkown-cause-china/en/<br></a><a href=\"https://www.who.int/emergencies/diseases/novel-coronavirus-2019\">https://www.who.int/emergencies/diseases/novel-coronavirus-2019</a><a href=\"https://web.archive.org/web/20200107032945/https://www.who.int/csr/don/05-january-2020-pneumonia-of-unkown-cause-china/en/\"><br></a></p>",
            "image": "https://nsulistiyawan.github.io/media/posts/5/covid-2019.jpg",
            "author": {
                "name": "nsulistiyawan"
            },
            "tags": [
                   "personal"
            ],
            "date_published": "2020-03-05T20:48:27+07:00",
            "date_modified": "2020-03-06T09:57:58+07:00"
        },
        {
            "id": "https://nsulistiyawan.github.io/toying-with-typescript-1.html",
            "url": "https://nsulistiyawan.github.io/toying-with-typescript-1.html",
            "title": "Toying with TypeScript (1)",
            "summary": "<p>Here's my documentation when learning TypeScript</p>\n",
            "content_html": "<p>Here's my documentation when learning TypeScript</p>\n\n<p> </p>\n<div class=\"post__toc\">\n<h3>Table of Contents</h3>\n<ul>\n<li><a href=\"#mcetoc_1e2ak2vsn0\">Install the package</a></li>\n<li><a href=\"#Setup-configuration\">Setup configuration</a></li>\n<li><a href=\"#Finally-run-the-app\">Finally, run the app</a></li>\n</ul>\n</div>\n<h3 id=\"mcetoc_1e2ak2vsn0\">Install the package</h3>\n<p>First we need create the project folder, in my case it was <code>typescript-express</code> folder, and then install all necessary package using npm</p>\n<p><code>mkdir typescript-express &amp;&amp; cd typescript-express</code></p>\n<p><code>npm init</code></p>\n<figure class=\"highlight bash\">\n<figure class=\"highlight bash\">\n<figure class=\"highlight bash\">\n<figure class=\"highlight bash\"></figure>\n<p><code>npm install typescript @types/express express node-ts -s</code></p>\n</figure>\n</figure>\n</figure>\n<p>You may wondering, why we need to install <code>@types/express</code> and <code>node-ts</code> package? Is that required?</p>\n<ol>\n<li><code>types/@express</code> will allow us to use regular library (in this case express library) like they had annotation like a fulltyped typescript library, its optional but we will get a nice autocomplete feature if on our editor after installing that package</li>\n<li><code>node-ts</code> package will allow us to run <code>typescript</code> to node engine without compiling <code>typescript</code>file into <code>javascript</code> first</li>\n</ol>\n<h3 id=\"Setup-configuration\"><a href=\"#Setup-configuration\" class=\"headerlink\" title=\"Setup configuration\"></a>Setup configuration</h3>\n<p>After all package installed, we need to create a <code>tsconfig.json</code> file on <code>typescript-express</code> directory. This is required, <code>tsconfig.json</code> file in a root directory indicate that the directory is the root of typescript project.</p>\n<figure class=\"post__image post__image\" ><img src=\"https://nsulistiyawan.github.io/media/posts/3/carbon-9.png\" width=\"232\" height=\"327\">\n<figcaption ><a href=\"https://gist.github.com/nsulistiyawan/4dbe5458300e2b2c425b2758283c38a7\">https://gist.github.com/nsulistiyawan/4dbe5458300e2b2c425b2758283c38a7</a></figcaption>\n</figure>\n<p> </p>\n<figure class=\"highlight json\"></figure>\n<p>After that we will need to add <code>scripts</code> section to our <code>package.json</code> file to run the program. Just add <code>scripts</code> section to our <code>package.json</code> file</p>\n<figure class=\"highlight json\"></figure>\n<figure class=\"post__image post__image\" ><img src=\"https://nsulistiyawan.github.io/media/posts/3/carbon-10.png\" width=\"341\" height=\"165\">\n<figcaption ><a href=\"https://gist.github.com/nsulistiyawan/bbf4166bb8bff3dce6eaccca4711356f\">https://gist.github.com/nsulistiyawan/bbf4166bb8bff3dce6eaccca4711356f</a></figcaption>\n</figure>\n<p> </p>\n<p>And as you can see from <code>package.json</code> file, if we run <code>npm run dev</code>, our app will try to find a file <code>./src/server.ts</code>. Lets create that file</p>\n<figure class=\"highlight typescript\"></figure>\n<figure class=\"post__image post__image\" ><img src=\"https://nsulistiyawan.github.io/media/posts/3/carbon-11.png\" width=\"409\" height=\"255\">\n<figcaption ><a href=\"https://gist.github.com/nsulistiyawan/aba566840b1a31b1342c3aed81700c6f\">https://gist.github.com/nsulistiyawan/aba566840b1a31b1342c3aed81700c6f</a></figcaption>\n</figure>\n<p>Easy right?</p>\n<figure class=\"highlight plain\"></figure>\n<h3 id=\"Finally-run-the-app\"><a href=\"#Finally-run-the-app\" class=\"headerlink\" title=\"Finally, run the app\"></a>Finally, run the app</h3>\n<p>Just run the app using <code>npm run dev</code>,</p>\n<figure class=\"highlight bash\"></figure>\n<p>Open your browser at, <code>127.0.0.1:5000</code>, and you will see <code>Hello TypeScript World!</code> response on it. That’s all for now.</p>",
            "author": {
                "name": "nsulistiyawan"
            },
            "tags": [
                   "programming"
            ],
            "date_published": "2020-03-01T15:33:55+07:00",
            "date_modified": "2020-03-01T17:02:46+07:00"
        },
        {
            "id": "https://nsulistiyawan.github.io/crawling-ajax-table-with-puppeteer.html",
            "url": "https://nsulistiyawan.github.io/crawling-ajax-table-with-puppeteer.html",
            "title": "Crawling Ajax Table with Puppeteer",
            "summary": " And here’s the result from our pupeeter crawler https://gist.github.com/nsulistiyawan/1fadc56ea85da21c45f929100df3beae That’s all!",
            "content_html": "<div class=\"post__toc\">\n<h3>Table of Contents</h3>\n<ul>\n<li><a href=\"#Click-button-that-trigger-ajax-request-then-wait-the-ajax-request-result\">Click button that trigger ajax request, then wait the ajax request result</a></li>\n<li><a href=\"#Click-the-pagination-link-wait-ajax-complete-parse-the-data-click-the-next-pagination\">Click the pagination link, wait ajax complete, parse the data, click the next pagination</a></li>\n</ul>\n</div>\n<p><br>Today i need to crawl a ajax table with pagination like this one.</p>\n<p><a href=\"https://i.imgur.com/kkZqlRl.png\"   class=\"fancybox\"><img class=\"post__image post__image--wide\" src=\"https://i.imgur.com/kkZqlRl.png\" width=\"660\" height=\"309\"></a></p>\n<p><a href=\"https://i.imgur.com/bDddLti.png\"   class=\"fancybox\"><img class=\"post__image post__image--wide\" src=\"https://i.imgur.com/bDddLti.png\" width=\"660\" height=\"319\"></a></p>\n<p>There are two problem that we need to solve.</p>\n<h3 id=\"Click-button-that-trigger-ajax-request-then-wait-the-ajax-request-result\"><a href=\"https://nsulistiyawan.github.io/2019/03/23/Crawling-Ajax-Table-with-Puppeteer.html#Click-button-that-trigger-ajax-request-then-wait-the-ajax-request-result\" class=\"headerlink\" title=\"Click button that trigger ajax request, then wait the ajax request result\"></a>Click button that trigger ajax request, then wait the ajax request result</h3>\n<p>To do that we need to make sure that all ajax request are finished before moving into next step. Fortunatelly, someone has created some helper for us <a href=\"https://github.com/jtassin/pending-xhr-puppeteer\" target=\"_blank\" rel=\"noopener noreferrer\">https://github.com/jtassin/pending-xhr-puppeteer</a></p>\n<p>We could just install them in our project with</p>\n<p><code>yarn add pending-xhr-puppeteer -D</code> </p>\n<figure class=\"highlight bash\"><i class=\"fa fa-clipboard\" aria-hidden=\"true\"></i></figure>\n<p>and use it like this :</p>\n<figure class=\"highlight javascript\"><i class=\"fa fa-clipboard\" aria-hidden=\"true\"></i></figure>\n<figure class=\"post__image post__image--wide\" ><img src=\"https://nsulistiyawan.github.io/media/posts/2/carbon-8.png\" alt=\"\" width=\"1024\" height=\"651\">\n<figcaption >\n<p><a href=\"https://gist.github.com/nsulistiyawan/76ed0f4da5bc858e4cdbf6ef7c37f2c5\">https://gist.github.com/nsulistiyawan/76ed0f4da5bc858e4cdbf6ef7c37f2c5</a></p>\n<figure class=\"highlight javascript\"><i class=\"fa fa-clipboard\" aria-hidden=\"true\"></i></figure>\n<figure class=\"post__image post__image--wide\" ></figure>\n</figcaption>\n</figure>\n<h3 id=\"Click-the-pagination-link-wait-ajax-complete-parse-the-data-click-the-next-pagination\"><a href=\"https://nsulistiyawan.github.io/2019/03/23/Crawling-Ajax-Table-with-Puppeteer.html#Click-the-pagination-link-wait-ajax-complete-parse-the-data-click-the-next-pagination\" class=\"headerlink\" title=\"Click the pagination link, wait ajax complete, parse the data, click the next pagination\"></a>Click the pagination link, wait ajax complete, parse the data, click the next pagination</h3>\n<p>My strategi is read the last 3 link, in this case, the last third link contain the last page. After that we doing loop to click each page, and parse the result on the table</p>\n<figure class=\"highlight javascript\"></figure>\n<figure class=\"post__image post__image--wide\" ><img src=\"https://nsulistiyawan.github.io/media/posts/2/carbon-6.png\" alt=\"\" width=\"1024\" height=\"615\">\n<figcaption >\n<figure class=\"highlight javascript\">\n<div class=\"copy-notice\"> <a href=\"https://gist.github.com/nsulistiyawan/58430f7ac31c09d4cd44a5249be6ba3f\">https://gist.github.com/nsulistiyawan/58430f7ac31c09d4cd44a5249be6ba3f</a></div>\n</figure>\n</figcaption>\n</figure>\n<p> </p>\n<p>And here’s the result from our pupeeter crawler</p>\n<figure class=\"post__image post__image--wide\" ><img src=\"https://nsulistiyawan.github.io/media/posts/2/carbon-7.png\" width=\"762\" height=\"561\">\n<figcaption >\n<p><a href=\"https://gist.github.com/nsulistiyawan/1fadc56ea85da21c45f929100df3beae\">https://gist.github.com/nsulistiyawan/1fadc56ea85da21c45f929100df3beae</a></p>\n</figcaption>\n</figure>\n<p><span style=\"font-family: -apple-system, BlinkMacSystemFont, Arial, 'Segoe UI', Roboto, Oxygen, Ubuntu, Cantarell, 'Fira Sans', 'Droid Sans', 'Helvetica Neue', sans-serif, 'Apple Color Emoji', 'Segoe UI Emoji', 'Segoe UI Symbol'; font-size: inherit;\"><br>That’s all!</span></p>",
            "author": {
                "name": "nsulistiyawan"
            },
            "tags": [
                   "programming"
            ],
            "date_published": "2019-03-23T14:23:00+07:00",
            "date_modified": "2020-03-01T17:02:51+07:00"
        },
        {
            "id": "https://nsulistiyawan.github.io/running-mysql-server-in-docker-container.html",
            "url": "https://nsulistiyawan.github.io/running-mysql-server-in-docker-container.html",
            "title": "Running MySQL Server in Docker Container",
            "summary": "That’s for now! Happy Dockering!",
            "content_html": "<div class=\"post__toc\">\n<h3>Table of Contents</h3>\n<ul>\n<li><a href=\"#Install-Docker\">Install Docker</a></li>\n<li><a href=\"#Pull-MySQL-Images-amp-Run-Image-as-Container\">Pull MySQL Images &amp; Run Image as Container</a></li>\n<li><a href=\"#Login-into-MySQL-Container\">Login into MySQL Container</a></li>\n</ul>\n</div>\n<h3 id=\"Install-Docker\"><br>Install Docker</h3>\n<p>Before toying around with docker, we will absolutely need to install docker according to our desktop environment. We could download &amp; install the installer file here   <a href=\"https://www.docker.com/community-edition#/download\" target=\"_blank\" rel=\"noopener noreferrer\">https://www.docker.com/community-edition#/download</a></p>\n<p>After installation we should try running <code>docker --help</code> in console/terminal/command line to make sure that docker is running well<br><br></p>\n<p><img class=\"post__image\" src=\"https://i.imgur.com/ywTpyDR.png\" alt=\"\" width=\"660\" height=\"446\"></p>\n<p>If you can see the similar output, great! You’re ready to go</p>\n<h3 id=\"Pull-MySQL-Images-amp-Run-Image-as-Container\" class=\"\">Pull MySQL Images &amp; Run Image as Container</h3>\n<p>First we will need to download the MySQL image</p>\n<figure class=\"highlight console\">\n<div class=\"copy-notice\"><code>docker pull mysql/mysql-server:latest</code> </div>\n<i class=\"fa fa-clipboard\" aria-hidden=\"true\"></i></figure>\n<p>After the download completed, we could check using the following command</p>\n<figure class=\"highlight console\">\n<div class=\"copy-notice\"><code>docker images</code> </div>\n<i class=\"fa fa-clipboard\" aria-hidden=\"true\"></i></figure>\n<p><a href=\"https://i.imgur.com/ntlhH8q.png\"   class=\"fancybox\"><img src=\"https://i.imgur.com/ntlhH8q.png\" alt=\"\"></a></p>\n<p>Our downloaded docker images should be shown. After that we could run the dock using the following command</p>\n<p><code>docker ps</code></p>\n<figure class=\"highlight plain\"><i class=\"fa fa-clipboard\" aria-hidden=\"true\"></i></figure>\n<figure class=\"highlight plain\"><i class=\"fa fa-clipboard\" aria-hidden=\"true\"></i></figure>\n<p><a href=\"https://i.imgur.com/XvKLcsk.png\"   class=\"fancybox\"><img src=\"https://i.imgur.com/XvKLcsk.png\" alt=\"\"></a></p>\n<p>If we could see the process using <code>docker ps</code>, that means our MySQL Server is running inside docker. How to login inside our docker, first we will need to check the MySQL password generated inside our container</p>\n<figure class=\"highlight plain\">\n<div class=\"copy-notice\"><code>docker logs mysql-01</code> </div>\n</figure>\n<figure class=\"highlight plain\"><i class=\"fa fa-clipboard\" aria-hidden=\"true\"></i></figure>\n<p><a href=\"https://i.imgur.com/Jn1X1yj.png\"   class=\"fancybox\"><img src=\"https://i.imgur.com/Jn1X1yj.png\" alt=\"\"></a></p>\n<p>find line with GENERATED ROOT PASSWORD, in my case it was <code>yMyKCEmYb9OfpUjyr,3g+Ac4xag</code>, that’s your docker MySQL Container dude!</p>\n<p> </p>\n<h3 id=\"Login-into-MySQL-Container\" class=\"\">Login into MySQL Container</h3>\n<p>To login into our MySQL Container, use this command</p>\n<figure class=\"highlight plain\">\n<div class=\"copy-notice\"><code><code>docker exec -it mysql-01 mysql -uroot -pyMyKCEmYb9OfpUjyr,3g+Ac4xag</code></code> </div>\n<i class=\"fa fa-clipboard\" aria-hidden=\"true\"></i></figure>\n<p>That’s for now! Happy Dockering!</p>",
            "author": {
                "name": "nsulistiyawan"
            },
            "tags": [
                   "programming"
            ],
            "date_published": "2017-07-22T14:11:00+07:00",
            "date_modified": "2020-03-01T17:02:56+07:00"
        }
    ]
}
