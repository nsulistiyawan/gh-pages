<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
    <title>/dev/null</title>
    <link href="https://nsulistiyawan.github.io/feed.xml" rel="self" />
    <link href="https://nsulistiyawan.github.io" />
    <updated>2020-03-01T16:18:51+07:00</updated>
    <author>
        <name>nsulistiyawan</name>
    </author>
    <id>https://nsulistiyawan.github.io</id>

    <entry>
        <title>Toying with TypeScript (1)</title>
        <author>
            <name>nsulistiyawan</name>
        </author>
        <link href="https://nsulistiyawan.github.io/toying-with-typescript-1.html"/>
        <id>https://nsulistiyawan.github.io/toying-with-typescript-1.html</id>

        <updated>2020-03-01T16:10:18+07:00</updated>
            <summary>
                <![CDATA[
                    <p>Here's my documentation when learning TypeScript</p>

                ]]>
            </summary>
        <content type="html">
            <![CDATA[
                <p>Here's my documentation when learning TypeScript</p>

<p> </p>
<div class="post__toc">
<h3>Table of Contents</h3>
<ul>
<li><a href="#mcetoc_1e2ak2vsn0">Install the package</a></li>
<li><a href="#Setup-configuration">Setup configuration</a></li>
<li><a href="#Finally-run-the-app">Finally, run the app</a></li>
</ul>
</div>
<h3 id="mcetoc_1e2ak2vsn0">Install the package</h3>
<p>First we need create the project folder, in my case it was <code>typescript-express</code> folder, and then install all necessary package using npm</p>
<p><code>mkdir typescript-express &amp;&amp; cd typescript-express</code></p>
<p><code>npm init</code></p>
<figure class="highlight bash">
<figure class="highlight bash">
<figure class="highlight bash">
<figure class="highlight bash"></figure>
<p><code>npm install typescript @types/express express node-ts -s</code></p>
</figure>
</figure>
</figure>
<p>You may wondering, why we need to install <code>@types/express</code> and <code>node-ts</code> package? Is that required?</p>
<ol>
<li><code>types/@express</code> will allow us to use regular library (in this case express library) like they had annotation like a fulltyped typescript library, its optional but we will get a nice autocomplete feature if on our editor after installing that package</li>
<li><code>node-ts</code> package will allow us to run <code>typescript</code> to node engine without compiling <code>typescript</code>file into <code>javascript</code> first</li>
</ol>
<h3 id="Setup-configuration"><a href="#Setup-configuration" class="headerlink" title="Setup configuration"></a>Setup configuration</h3>
<p>After all package installed, we need to create a <code>tsconfig.json</code> file on <code>typescript-express</code> directory. This is required, <code>tsconfig.json</code> file in a root directory indicate that the directory is the root of typescript project.</p>
<figure class="post__image post__image" ><img src="https://nsulistiyawan.github.io/media/posts/3/carbon-9.png" width="232" height="327">
<figcaption ><a href="https://gist.github.com/nsulistiyawan/4dbe5458300e2b2c425b2758283c38a7">https://gist.github.com/nsulistiyawan/4dbe5458300e2b2c425b2758283c38a7</a></figcaption>
</figure>
<p> </p>
<figure class="highlight json"></figure>
<p>After that we will need to add <code>scripts</code> section to our <code>package.json</code> file to run the program. Just add <code>scripts</code> section to our <code>package.json</code> file</p>
<figure class="highlight json"></figure>
<figure class="post__image post__image" ><img src="https://nsulistiyawan.github.io/media/posts/3/carbon-10.png" width="341" height="165">
<figcaption ><a href="https://gist.github.com/nsulistiyawan/bbf4166bb8bff3dce6eaccca4711356f">https://gist.github.com/nsulistiyawan/bbf4166bb8bff3dce6eaccca4711356f</a></figcaption>
</figure>
<p> </p>
<p>And as you can see from <code>package.json</code> file, if we run <code>npm run dev</code>, our app will try to find a file <code>./src/server.ts</code>. Lets create that file</p>
<figure class="highlight typescript"></figure>
<figure class="post__image post__image" ><img src="https://nsulistiyawan.github.io/media/posts/3/carbon-11.png" width="409" height="255">
<figcaption ><a href="https://gist.github.com/nsulistiyawan/aba566840b1a31b1342c3aed81700c6f">https://gist.github.com/nsulistiyawan/aba566840b1a31b1342c3aed81700c6f</a></figcaption>
</figure>
<p>Easy right?</p>
<figure class="highlight plain"></figure>
<h3 id="Finally-run-the-app"><a href="#Finally-run-the-app" class="headerlink" title="Finally, run the app"></a>Finally, run the app</h3>
<p>Just run the app using <code>npm run dev</code>,</p>
<figure class="highlight bash"></figure>
<p>Open your browser at, <code>127.0.0.1:5000</code>, and you will see <code>Hello TypeScript World!</code> response on it. That’s all for now.</p>
            ]]>
        </content>
    </entry>
    <entry>
        <title>Crawling Ajax Table with Puppeteer</title>
        <author>
            <name>nsulistiyawan</name>
        </author>
        <link href="https://nsulistiyawan.github.io/crawling-ajax-table-with-puppeteer.html"/>
        <id>https://nsulistiyawan.github.io/crawling-ajax-table-with-puppeteer.html</id>

        <updated>2020-03-01T15:23:43+07:00</updated>
            <summary>
                <![CDATA[
                     And here’s the result from our pupeeter crawler https://gist.github.com/nsulistiyawan/1fadc56ea85da21c45f929100df3beae That’s all!
                ]]>
            </summary>
        <content type="html">
            <![CDATA[
                <div class="post__toc">
<h3>Table of Contents</h3>
<ul>
<li><a href="#Click-button-that-trigger-ajax-request-then-wait-the-ajax-request-result">Click button that trigger ajax request, then wait the ajax request result</a></li>
<li><a href="#Click-the-pagination-link-wait-ajax-complete-parse-the-data-click-the-next-pagination">Click the pagination link, wait ajax complete, parse the data, click the next pagination</a></li>
</ul>
</div>
<p><br>Today i need to crawl a ajax table with pagination like this one.</p>
<p><a href="https://i.imgur.com/kkZqlRl.png"   class="fancybox"><img class="post__image post__image--wide" src="https://i.imgur.com/kkZqlRl.png" width="660" height="309"></a></p>
<p><a href="https://i.imgur.com/bDddLti.png"   class="fancybox"><img class="post__image post__image--wide" src="https://i.imgur.com/bDddLti.png" width="660" height="319"></a></p>
<p>There are two problem that we need to solve.</p>
<h3 id="Click-button-that-trigger-ajax-request-then-wait-the-ajax-request-result"><a href="https://nsulistiyawan.github.io/2019/03/23/Crawling-Ajax-Table-with-Puppeteer.html#Click-button-that-trigger-ajax-request-then-wait-the-ajax-request-result" class="headerlink" title="Click button that trigger ajax request, then wait the ajax request result"></a>Click button that trigger ajax request, then wait the ajax request result</h3>
<p>To do that we need to make sure that all ajax request are finished before moving into next step. Fortunatelly, someone has created some helper for us <a href="https://github.com/jtassin/pending-xhr-puppeteer" target="_blank" rel="noopener noreferrer">https://github.com/jtassin/pending-xhr-puppeteer</a></p>
<p>We could just install them in our project with</p>
<p><code>yarn add pending-xhr-puppeteer -D</code> </p>
<figure class="highlight bash"><i class="fa fa-clipboard" aria-hidden="true"></i></figure>
<p>and use it like this :</p>
<figure class="highlight javascript"><i class="fa fa-clipboard" aria-hidden="true"></i></figure>
<figure class="post__image post__image--wide" ><img src="https://nsulistiyawan.github.io/media/posts/2/carbon-8.png" alt="" width="1024" height="651">
<figcaption >
<p><a href="https://gist.github.com/nsulistiyawan/76ed0f4da5bc858e4cdbf6ef7c37f2c5">https://gist.github.com/nsulistiyawan/76ed0f4da5bc858e4cdbf6ef7c37f2c5</a></p>
<figure class="highlight javascript"><i class="fa fa-clipboard" aria-hidden="true"></i></figure>
<figure class="post__image post__image--wide" ></figure>
</figcaption>
</figure>
<h3 id="Click-the-pagination-link-wait-ajax-complete-parse-the-data-click-the-next-pagination"><a href="https://nsulistiyawan.github.io/2019/03/23/Crawling-Ajax-Table-with-Puppeteer.html#Click-the-pagination-link-wait-ajax-complete-parse-the-data-click-the-next-pagination" class="headerlink" title="Click the pagination link, wait ajax complete, parse the data, click the next pagination"></a>Click the pagination link, wait ajax complete, parse the data, click the next pagination</h3>
<p>My strategi is read the last 3 link, in this case, the last third link contain the last page. After that we doing loop to click each page, and parse the result on the table</p>
<figure class="highlight javascript"></figure>
<figure class="post__image post__image--wide" ><img src="https://nsulistiyawan.github.io/media/posts/2/carbon-6.png" alt="" width="1024" height="615">
<figcaption >
<figure class="highlight javascript">
<div class="copy-notice"> <a href="https://gist.github.com/nsulistiyawan/58430f7ac31c09d4cd44a5249be6ba3f">https://gist.github.com/nsulistiyawan/58430f7ac31c09d4cd44a5249be6ba3f</a></div>
</figure>
</figcaption>
</figure>
<p> </p>
<p>And here’s the result from our pupeeter crawler</p>
<figure class="post__image post__image--wide" ><img src="https://nsulistiyawan.github.io/media/posts/2/carbon-7.png" width="762" height="561">
<figcaption >
<p><a href="https://gist.github.com/nsulistiyawan/1fadc56ea85da21c45f929100df3beae">https://gist.github.com/nsulistiyawan/1fadc56ea85da21c45f929100df3beae</a></p>
</figcaption>
</figure>
<p><span style="font-family: -apple-system, BlinkMacSystemFont, Arial, 'Segoe UI', Roboto, Oxygen, Ubuntu, Cantarell, 'Fira Sans', 'Droid Sans', 'Helvetica Neue', sans-serif, 'Apple Color Emoji', 'Segoe UI Emoji', 'Segoe UI Symbol'; font-size: inherit;"><br>That’s all!</span></p>
            ]]>
        </content>
    </entry>
    <entry>
        <title>Running MySQL Server in Docker Container</title>
        <author>
            <name>nsulistiyawan</name>
        </author>
        <link href="https://nsulistiyawan.github.io/running-mysql-server-in-docker-container.html"/>
        <id>https://nsulistiyawan.github.io/running-mysql-server-in-docker-container.html</id>

        <updated>2020-03-01T15:10:47+07:00</updated>
            <summary>
                <![CDATA[
                    That’s for now! Happy Dockering!
                ]]>
            </summary>
        <content type="html">
            <![CDATA[
                <div class="post__toc">
<h3>Table of Contents</h3>
<ul>
<li><a href="#Install-Docker">Install Docker</a></li>
<li><a href="#Pull-MySQL-Images-amp-Run-Image-as-Container">Pull MySQL Images &amp; Run Image as Container</a></li>
<li><a href="#Login-into-MySQL-Container">Login into MySQL Container</a></li>
</ul>
</div>
<h3 id="Install-Docker"><br>Install Docker</h3>
<p>Before toying around with docker, we will absolutely need to install docker according to our desktop environment. We could download &amp; install the installer file here   <a href="https://www.docker.com/community-edition#/download" target="_blank" rel="noopener noreferrer">https://www.docker.com/community-edition#/download</a></p>
<p>After installation we should try running <code>docker --help</code> in console/terminal/command line to make sure that docker is running well<br><br></p>
<p><img class="post__image" src="https://i.imgur.com/ywTpyDR.png" alt="" width="660" height="446"></p>
<p>If you can see the similar output, great! You’re ready to go</p>
<h3 id="Pull-MySQL-Images-amp-Run-Image-as-Container" class="">Pull MySQL Images &amp; Run Image as Container</h3>
<p>First we will need to download the MySQL image</p>
<figure class="highlight console">
<div class="copy-notice"><code>docker pull mysql/mysql-server:latest</code> </div>
<i class="fa fa-clipboard" aria-hidden="true"></i></figure>
<p>After the download completed, we could check using the following command</p>
<figure class="highlight console">
<div class="copy-notice"><code>docker images</code> </div>
<i class="fa fa-clipboard" aria-hidden="true"></i></figure>
<p><a href="https://i.imgur.com/ntlhH8q.png"   class="fancybox"><img src="https://i.imgur.com/ntlhH8q.png" alt=""></a></p>
<p>Our downloaded docker images should be shown. After that we could run the dock using the following command</p>
<p><code>docker ps</code></p>
<figure class="highlight plain"><i class="fa fa-clipboard" aria-hidden="true"></i></figure>
<figure class="highlight plain"><i class="fa fa-clipboard" aria-hidden="true"></i></figure>
<p><a href="https://i.imgur.com/XvKLcsk.png"   class="fancybox"><img src="https://i.imgur.com/XvKLcsk.png" alt=""></a></p>
<p>If we could see the process using <code>docker ps</code>, that means our MySQL Server is running inside docker. How to login inside our docker, first we will need to check the MySQL password generated inside our container</p>
<figure class="highlight plain">
<div class="copy-notice"><code>docker logs mysql-01</code> </div>
</figure>
<figure class="highlight plain"><i class="fa fa-clipboard" aria-hidden="true"></i></figure>
<p><a href="https://i.imgur.com/Jn1X1yj.png"   class="fancybox"><img src="https://i.imgur.com/Jn1X1yj.png" alt=""></a></p>
<p>find line with GENERATED ROOT PASSWORD, in my case it was <code>yMyKCEmYb9OfpUjyr,3g+Ac4xag</code>, that’s your docker MySQL Container dude!</p>
<p> </p>
<h3 id="Login-into-MySQL-Container" class="">Login into MySQL Container</h3>
<p>To login into our MySQL Container, use this command</p>
<figure class="highlight plain">
<div class="copy-notice"><code><code>docker exec -it mysql-01 mysql -uroot -pyMyKCEmYb9OfpUjyr,3g+Ac4xag</code></code> </div>
<i class="fa fa-clipboard" aria-hidden="true"></i></figure>
<p>That’s for now! Happy Dockering!</p>
            ]]>
        </content>
    </entry>
</feed>
